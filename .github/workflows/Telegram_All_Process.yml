name: Telegram_All_Process

on:
  schedule:
    - cron: '0 0 * * 2' # At 00:00
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: set timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Switzerland"
          

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r src/pipeline/requirements.txt

      - name: Step0 scraping
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_STRING_TOKEN: ${{ secrets.TELEGRAM_STRING_TOKEN }}
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python src/helper/scraping/telegram_tools/scrapeTelegramChannelMessages.py -i data/telegram/queries/switzerland_groups.txt -o scrape.telegram

      - name: Step1 generate bertopic
        env:
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
        run: python src/pipeline/1_predictTopicLabel.py -o scrape.telegram
        
      - name: Step2 checking
        env:
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
        run: python src/pipeline/2_calculateMessageWithoutBertTopic.py -i scrape.telegram

      - name: Step3 generate embedding
        env:
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python src/pipeline/3_assignEmbeddingToMessage.py -o scrape.telegram

      - name: Step3 calculate topic frequency
        env:
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
        run: python src/pipeline/3_updateTopicFrequencyCount.py -i scrape.telegram -o aggregate.TelegramCount


      - name: Step4 add completion labels
        env:
          ATLAS_USER: ${{ secrets.ATLAS_USER }}
          ATLAS_TOKEN: ${{ secrets.ATLAS_TOKEN }}
        run: python src/pipeline/4_addCompletionLabel.py -o scrape.telegram
